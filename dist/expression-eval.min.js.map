{"version":3,"file":"expression-eval.min.js","sources":["../node_modules/jsep/build/jsep.js","../node_modules/expression-eval/index.js"],"sourcesContent":["//     JavaScript Expression Parser (JSEP) 0.3.3\r\n//     JSEP may be freely distributed under the MIT License\r\n//     http://jsep.from.so/\r\n\r\n/*global module: true, exports: true, console: true */\r\n(function (root) {\r\n\t'use strict';\r\n\t// Node Types\r\n\t// ----------\r\n\r\n\t// This is the full set of types that any JSEP node can be.\r\n\t// Store them here to save space when minified\r\n\tvar COMPOUND = 'Compound',\r\n\t\tIDENTIFIER = 'Identifier',\r\n\t\tMEMBER_EXP = 'MemberExpression',\r\n\t\tLITERAL = 'Literal',\r\n\t\tTHIS_EXP = 'ThisExpression',\r\n\t\tCALL_EXP = 'CallExpression',\r\n\t\tUNARY_EXP = 'UnaryExpression',\r\n\t\tBINARY_EXP = 'BinaryExpression',\r\n\t\tLOGICAL_EXP = 'LogicalExpression',\r\n\t\tCONDITIONAL_EXP = 'ConditionalExpression',\r\n\t\tARRAY_EXP = 'ArrayExpression',\r\n\r\n\t\tPERIOD_CODE = 46, // '.'\r\n\t\tCOMMA_CODE  = 44, // ','\r\n\t\tSQUOTE_CODE = 39, // single quote\r\n\t\tDQUOTE_CODE = 34, // double quotes\r\n\t\tOPAREN_CODE = 40, // (\r\n\t\tCPAREN_CODE = 41, // )\r\n\t\tOBRACK_CODE = 91, // [\r\n\t\tCBRACK_CODE = 93, // ]\r\n\t\tQUMARK_CODE = 63, // ?\r\n\t\tSEMCOL_CODE = 59, // ;\r\n\t\tCOLON_CODE  = 58, // :\r\n\r\n\t\tthrowError = function(message, index) {\r\n\t\t\tvar error = new Error(message + ' at character ' + index);\r\n\t\t\terror.index = index;\r\n\t\t\terror.description = message;\r\n\t\t\tthrow error;\r\n\t\t},\r\n\r\n\t// Operations\r\n\t// ----------\r\n\r\n\t// Set `t` to `true` to save space (when minified, not gzipped)\r\n\t\tt = true,\r\n\t// Use a quickly-accessible map to store all of the unary operators\r\n\t// Values are set to `true` (it really doesn't matter)\r\n\t\tunary_ops = {'-': t, '!': t, '~': t, '+': t},\r\n\t// Also use a map for the binary operations but set their values to their\r\n\t// binary precedence for quick reference:\r\n\t// see [Order of operations](http://en.wikipedia.org/wiki/Order_of_operations#Programming_language)\r\n\t\tbinary_ops = {\r\n\t\t\t'||': 1, '&&': 2, '|': 3,  '^': 4,  '&': 5,\r\n\t\t\t'==': 6, '!=': 6, '===': 6, '!==': 6,\r\n\t\t\t'<': 7,  '>': 7,  '<=': 7,  '>=': 7,\r\n\t\t\t'<<':8,  '>>': 8, '>>>': 8,\r\n\t\t\t'+': 9, '-': 9,\r\n\t\t\t'*': 10, '/': 10, '%': 10\r\n\t\t},\r\n\t// Get return the longest key length of any object\r\n\t\tgetMaxKeyLen = function(obj) {\r\n\t\t\tvar max_len = 0, len;\r\n\t\t\tfor(var key in obj) {\r\n\t\t\t\tif((len = key.length) > max_len && obj.hasOwnProperty(key)) {\r\n\t\t\t\t\tmax_len = len;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn max_len;\r\n\t\t},\r\n\t\tmax_unop_len = getMaxKeyLen(unary_ops),\r\n\t\tmax_binop_len = getMaxKeyLen(binary_ops),\r\n\t// Literals\r\n\t// ----------\r\n\t// Store the values to return for the various literals we may encounter\r\n\t\tliterals = {\r\n\t\t\t'true': true,\r\n\t\t\t'false': false,\r\n\t\t\t'null': null\r\n\t\t},\r\n\t// Except for `this`, which is special. This could be changed to something like `'self'` as well\r\n\t\tthis_str = 'this',\r\n\t// Returns the precedence of a binary operator or `0` if it isn't a binary operator\r\n\t\tbinaryPrecedence = function(op_val) {\r\n\t\t\treturn binary_ops[op_val] || 0;\r\n\t\t},\r\n\t// Utility function (gets called from multiple places)\r\n\t// Also note that `a && b` and `a || b` are *logical* expressions, not binary expressions\r\n\t\tcreateBinaryExpression = function (operator, left, right) {\r\n\t\t\tvar type = (operator === '||' || operator === '&&') ? LOGICAL_EXP : BINARY_EXP;\r\n\t\t\treturn {\r\n\t\t\t\ttype: type,\r\n\t\t\t\toperator: operator,\r\n\t\t\t\tleft: left,\r\n\t\t\t\tright: right\r\n\t\t\t};\r\n\t\t},\r\n\t\t// `ch` is a character code in the next three functions\r\n\t\tisDecimalDigit = function(ch) {\r\n\t\t\treturn (ch >= 48 && ch <= 57); // 0...9\r\n\t\t},\r\n\t\tisIdentifierStart = function(ch) {\r\n\t\t\treturn (ch === 36) || (ch === 95) || // `$` and `_`\r\n\t\t\t\t\t(ch >= 65 && ch <= 90) || // A...Z\r\n\t\t\t\t\t(ch >= 97 && ch <= 122) || // a...z\r\n                    (ch >= 128 && !binary_ops[String.fromCharCode(ch)]); // any non-ASCII that is not an operator\r\n\t\t},\r\n\t\tisIdentifierPart = function(ch) {\r\n\t\t\treturn (ch === 36) || (ch === 95) || // `$` and `_`\r\n\t\t\t\t\t(ch >= 65 && ch <= 90) || // A...Z\r\n\t\t\t\t\t(ch >= 97 && ch <= 122) || // a...z\r\n\t\t\t\t\t(ch >= 48 && ch <= 57) || // 0...9\r\n                    (ch >= 128 && !binary_ops[String.fromCharCode(ch)]); // any non-ASCII that is not an operator\r\n\t\t},\r\n\r\n\t\t// Parsing\r\n\t\t// -------\r\n\t\t// `expr` is a string with the passed in expression\r\n\t\tjsep = function(expr) {\r\n\t\t\t// `index` stores the character number we are currently at while `length` is a constant\r\n\t\t\t// All of the gobbles below will modify `index` as we move along\r\n\t\t\tvar index = 0,\r\n\t\t\t\tcharAtFunc = expr.charAt,\r\n\t\t\t\tcharCodeAtFunc = expr.charCodeAt,\r\n\t\t\t\texprI = function(i) { return charAtFunc.call(expr, i); },\r\n\t\t\t\texprICode = function(i) { return charCodeAtFunc.call(expr, i); },\r\n\t\t\t\tlength = expr.length,\r\n\r\n\t\t\t\t// Push `index` up to the next non-space character\r\n\t\t\t\tgobbleSpaces = function() {\r\n\t\t\t\t\tvar ch = exprICode(index);\r\n\t\t\t\t\t// space or tab\r\n\t\t\t\t\twhile(ch === 32 || ch === 9 || ch === 10 || ch === 13) {\r\n\t\t\t\t\t\tch = exprICode(++index);\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\r\n\t\t\t\t// The main parsing function. Much of this code is dedicated to ternary expressions\r\n\t\t\t\tgobbleExpression = function() {\r\n\t\t\t\t\tvar test = gobbleBinaryExpression(),\r\n\t\t\t\t\t\tconsequent, alternate;\r\n\t\t\t\t\tgobbleSpaces();\r\n\t\t\t\t\tif(exprICode(index) === QUMARK_CODE) {\r\n\t\t\t\t\t\t// Ternary expression: test ? consequent : alternate\r\n\t\t\t\t\t\tindex++;\r\n\t\t\t\t\t\tconsequent = gobbleExpression();\r\n\t\t\t\t\t\tif(!consequent) {\r\n\t\t\t\t\t\t\tthrowError('Expected expression', index);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tgobbleSpaces();\r\n\t\t\t\t\t\tif(exprICode(index) === COLON_CODE) {\r\n\t\t\t\t\t\t\tindex++;\r\n\t\t\t\t\t\t\talternate = gobbleExpression();\r\n\t\t\t\t\t\t\tif(!alternate) {\r\n\t\t\t\t\t\t\t\tthrowError('Expected expression', index);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\ttype: CONDITIONAL_EXP,\r\n\t\t\t\t\t\t\t\ttest: test,\r\n\t\t\t\t\t\t\t\tconsequent: consequent,\r\n\t\t\t\t\t\t\t\talternate: alternate\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tthrowError('Expected :', index);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn test;\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\r\n\t\t\t\t// Search for the operation portion of the string (e.g. `+`, `===`)\r\n\t\t\t\t// Start by taking the longest possible binary operations (3 characters: `===`, `!==`, `>>>`)\r\n\t\t\t\t// and move down from 3 to 2 to 1 character until a matching binary operation is found\r\n\t\t\t\t// then, return that binary operation\r\n\t\t\t\tgobbleBinaryOp = function() {\r\n\t\t\t\t\tgobbleSpaces();\r\n\t\t\t\t\tvar biop, to_check = expr.substr(index, max_binop_len), tc_len = to_check.length;\r\n\t\t\t\t\twhile(tc_len > 0) {\r\n\t\t\t\t\t\tif(binary_ops.hasOwnProperty(to_check)) {\r\n\t\t\t\t\t\t\tindex += tc_len;\r\n\t\t\t\t\t\t\treturn to_check;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tto_check = to_check.substr(0, --tc_len);\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t},\r\n\r\n\t\t\t\t// This function is responsible for gobbling an individual expression,\r\n\t\t\t\t// e.g. `1`, `1+2`, `a+(b*2)-Math.sqrt(2)`\r\n\t\t\t\tgobbleBinaryExpression = function() {\r\n\t\t\t\t\tvar ch_i, node, biop, prec, stack, biop_info, left, right, i;\r\n\r\n\t\t\t\t\t// First, try to get the leftmost thing\r\n\t\t\t\t\t// Then, check to see if there's a binary operator operating on that leftmost thing\r\n\t\t\t\t\tleft = gobbleToken();\r\n\t\t\t\t\tbiop = gobbleBinaryOp();\r\n\r\n\t\t\t\t\t// If there wasn't a binary operator, just return the leftmost node\r\n\t\t\t\t\tif(!biop) {\r\n\t\t\t\t\t\treturn left;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Otherwise, we need to start a stack to properly place the binary operations in their\r\n\t\t\t\t\t// precedence structure\r\n\t\t\t\t\tbiop_info = { value: biop, prec: binaryPrecedence(biop)};\r\n\r\n\t\t\t\t\tright = gobbleToken();\r\n\t\t\t\t\tif(!right) {\r\n\t\t\t\t\t\tthrowError(\"Expected expression after \" + biop, index);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tstack = [left, biop_info, right];\r\n\r\n\t\t\t\t\t// Properly deal with precedence using [recursive descent](http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm)\r\n\t\t\t\t\twhile((biop = gobbleBinaryOp())) {\r\n\t\t\t\t\t\tprec = binaryPrecedence(biop);\r\n\r\n\t\t\t\t\t\tif(prec === 0) {\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbiop_info = { value: biop, prec: prec };\r\n\r\n\t\t\t\t\t\t// Reduce: make a binary expression from the three topmost entries.\r\n\t\t\t\t\t\twhile ((stack.length > 2) && (prec <= stack[stack.length - 2].prec)) {\r\n\t\t\t\t\t\t\tright = stack.pop();\r\n\t\t\t\t\t\t\tbiop = stack.pop().value;\r\n\t\t\t\t\t\t\tleft = stack.pop();\r\n\t\t\t\t\t\t\tnode = createBinaryExpression(biop, left, right);\r\n\t\t\t\t\t\t\tstack.push(node);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tnode = gobbleToken();\r\n\t\t\t\t\t\tif(!node) {\r\n\t\t\t\t\t\t\tthrowError(\"Expected expression after \" + biop, index);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tstack.push(biop_info, node);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ti = stack.length - 1;\r\n\t\t\t\t\tnode = stack[i];\r\n\t\t\t\t\twhile(i > 1) {\r\n\t\t\t\t\t\tnode = createBinaryExpression(stack[i - 1].value, stack[i - 2], node);\r\n\t\t\t\t\t\ti -= 2;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn node;\r\n\t\t\t\t},\r\n\r\n\t\t\t\t// An individual part of a binary expression:\r\n\t\t\t\t// e.g. `foo.bar(baz)`, `1`, `\"abc\"`, `(a % 2)` (because it's in parenthesis)\r\n\t\t\t\tgobbleToken = function() {\r\n\t\t\t\t\tvar ch, to_check, tc_len;\r\n\r\n\t\t\t\t\tgobbleSpaces();\r\n\t\t\t\t\tch = exprICode(index);\r\n\r\n\t\t\t\t\tif(isDecimalDigit(ch) || ch === PERIOD_CODE) {\r\n\t\t\t\t\t\t// Char code 46 is a dot `.` which can start off a numeric literal\r\n\t\t\t\t\t\treturn gobbleNumericLiteral();\r\n\t\t\t\t\t} else if(ch === SQUOTE_CODE || ch === DQUOTE_CODE) {\r\n\t\t\t\t\t\t// Single or double quotes\r\n\t\t\t\t\t\treturn gobbleStringLiteral();\r\n\t\t\t\t\t} else if (ch === OBRACK_CODE) {\r\n\t\t\t\t\t\treturn gobbleArray();\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tto_check = expr.substr(index, max_unop_len);\r\n\t\t\t\t\t\ttc_len = to_check.length;\r\n\t\t\t\t\t\twhile(tc_len > 0) {\r\n\t\t\t\t\t\t\tif(unary_ops.hasOwnProperty(to_check)) {\r\n\t\t\t\t\t\t\t\tindex += tc_len;\r\n\t\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\t\ttype: UNARY_EXP,\r\n\t\t\t\t\t\t\t\t\toperator: to_check,\r\n\t\t\t\t\t\t\t\t\targument: gobbleToken(),\r\n\t\t\t\t\t\t\t\t\tprefix: true\r\n\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tto_check = to_check.substr(0, --tc_len);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (isIdentifierStart(ch) || ch === OPAREN_CODE) { // open parenthesis\r\n\t\t\t\t\t\t\t// `foo`, `bar.baz`\r\n\t\t\t\t\t\t\treturn gobbleVariable();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t},\r\n\t\t\t\t// Parse simple numeric literals: `12`, `3.4`, `.5`. Do this by using a string to\r\n\t\t\t\t// keep track of everything in the numeric literal and then calling `parseFloat` on that string\r\n\t\t\t\tgobbleNumericLiteral = function() {\r\n\t\t\t\t\tvar number = '', ch, chCode;\r\n\t\t\t\t\twhile(isDecimalDigit(exprICode(index))) {\r\n\t\t\t\t\t\tnumber += exprI(index++);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif(exprICode(index) === PERIOD_CODE) { // can start with a decimal marker\r\n\t\t\t\t\t\tnumber += exprI(index++);\r\n\r\n\t\t\t\t\t\twhile(isDecimalDigit(exprICode(index))) {\r\n\t\t\t\t\t\t\tnumber += exprI(index++);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tch = exprI(index);\r\n\t\t\t\t\tif(ch === 'e' || ch === 'E') { // exponent marker\r\n\t\t\t\t\t\tnumber += exprI(index++);\r\n\t\t\t\t\t\tch = exprI(index);\r\n\t\t\t\t\t\tif(ch === '+' || ch === '-') { // exponent sign\r\n\t\t\t\t\t\t\tnumber += exprI(index++);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\twhile(isDecimalDigit(exprICode(index))) { //exponent itself\r\n\t\t\t\t\t\t\tnumber += exprI(index++);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(!isDecimalDigit(exprICode(index-1)) ) {\r\n\t\t\t\t\t\t\tthrowError('Expected exponent (' + number + exprI(index) + ')', index);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\r\n\t\t\t\t\tchCode = exprICode(index);\r\n\t\t\t\t\t// Check to make sure this isn't a variable name that start with a number (123abc)\r\n\t\t\t\t\tif(isIdentifierStart(chCode)) {\r\n\t\t\t\t\t\tthrowError('Variable names cannot start with a number (' +\r\n\t\t\t\t\t\t\t\t\tnumber + exprI(index) + ')', index);\r\n\t\t\t\t\t} else if(chCode === PERIOD_CODE) {\r\n\t\t\t\t\t\tthrowError('Unexpected period', index);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\ttype: LITERAL,\r\n\t\t\t\t\t\tvalue: parseFloat(number),\r\n\t\t\t\t\t\traw: number\r\n\t\t\t\t\t};\r\n\t\t\t\t},\r\n\r\n\t\t\t\t// Parses a string literal, staring with single or double quotes with basic support for escape codes\r\n\t\t\t\t// e.g. `\"hello world\"`, `'this is\\nJSEP'`\r\n\t\t\t\tgobbleStringLiteral = function() {\r\n\t\t\t\t\tvar str = '', quote = exprI(index++), closed = false, ch;\r\n\r\n\t\t\t\t\twhile(index < length) {\r\n\t\t\t\t\t\tch = exprI(index++);\r\n\t\t\t\t\t\tif(ch === quote) {\r\n\t\t\t\t\t\t\tclosed = true;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t} else if(ch === '\\\\') {\r\n\t\t\t\t\t\t\t// Check for all of the common escape codes\r\n\t\t\t\t\t\t\tch = exprI(index++);\r\n\t\t\t\t\t\t\tswitch(ch) {\r\n\t\t\t\t\t\t\t\tcase 'n': str += '\\n'; break;\r\n\t\t\t\t\t\t\t\tcase 'r': str += '\\r'; break;\r\n\t\t\t\t\t\t\t\tcase 't': str += '\\t'; break;\r\n\t\t\t\t\t\t\t\tcase 'b': str += '\\b'; break;\r\n\t\t\t\t\t\t\t\tcase 'f': str += '\\f'; break;\r\n\t\t\t\t\t\t\t\tcase 'v': str += '\\x0B'; break;\r\n\t\t\t\t\t\t\t\tdefault : str += ch;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tstr += ch;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif(!closed) {\r\n\t\t\t\t\t\tthrowError('Unclosed quote after \"'+str+'\"', index);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\ttype: LITERAL,\r\n\t\t\t\t\t\tvalue: str,\r\n\t\t\t\t\t\traw: quote + str + quote\r\n\t\t\t\t\t};\r\n\t\t\t\t},\r\n\r\n\t\t\t\t// Gobbles only identifiers\r\n\t\t\t\t// e.g.: `foo`, `_value`, `$x1`\r\n\t\t\t\t// Also, this function checks if that identifier is a literal:\r\n\t\t\t\t// (e.g. `true`, `false`, `null`) or `this`\r\n\t\t\t\tgobbleIdentifier = function() {\r\n\t\t\t\t\tvar ch = exprICode(index), start = index, identifier;\r\n\r\n\t\t\t\t\tif(isIdentifierStart(ch)) {\r\n\t\t\t\t\t\tindex++;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthrowError('Unexpected ' + exprI(index), index);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\twhile(index < length) {\r\n\t\t\t\t\t\tch = exprICode(index);\r\n\t\t\t\t\t\tif(isIdentifierPart(ch)) {\r\n\t\t\t\t\t\t\tindex++;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tidentifier = expr.slice(start, index);\r\n\r\n\t\t\t\t\tif(literals.hasOwnProperty(identifier)) {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\ttype: LITERAL,\r\n\t\t\t\t\t\t\tvalue: literals[identifier],\r\n\t\t\t\t\t\t\traw: identifier\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t} else if(identifier === this_str) {\r\n\t\t\t\t\t\treturn { type: THIS_EXP };\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\ttype: IDENTIFIER,\r\n\t\t\t\t\t\t\tname: identifier\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\r\n\t\t\t\t// Gobbles a list of arguments within the context of a function call\r\n\t\t\t\t// or array literal. This function also assumes that the opening character\r\n\t\t\t\t// `(` or `[` has already been gobbled, and gobbles expressions and commas\r\n\t\t\t\t// until the terminator character `)` or `]` is encountered.\r\n\t\t\t\t// e.g. `foo(bar, baz)`, `my_func()`, or `[bar, baz]`\r\n\t\t\t\tgobbleArguments = function(termination) {\r\n\t\t\t\t\tvar ch_i, args = [], node, closed = false;\r\n\t\t\t\t\twhile(index < length) {\r\n\t\t\t\t\t\tgobbleSpaces();\r\n\t\t\t\t\t\tch_i = exprICode(index);\r\n\t\t\t\t\t\tif(ch_i === termination) { // done parsing\r\n\t\t\t\t\t\t\tclosed = true;\r\n\t\t\t\t\t\t\tindex++;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t} else if (ch_i === COMMA_CODE) { // between expressions\r\n\t\t\t\t\t\t\tindex++;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tnode = gobbleExpression();\r\n\t\t\t\t\t\t\tif(!node || node.type === COMPOUND) {\r\n\t\t\t\t\t\t\t\tthrowError('Expected comma', index);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\targs.push(node);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (!closed) {\r\n\t\t\t\t\t\tthrowError('Expected ' + String.fromCharCode(termination), index);\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn args;\r\n\t\t\t\t},\r\n\r\n\t\t\t\t// Gobble a non-literal variable name. This variable name may include properties\r\n\t\t\t\t// e.g. `foo`, `bar.baz`, `foo['bar'].baz`\r\n\t\t\t\t// It also gobbles function calls:\r\n\t\t\t\t// e.g. `Math.acos(obj.angle)`\r\n\t\t\t\tgobbleVariable = function() {\r\n\t\t\t\t\tvar ch_i, node;\r\n\t\t\t\t\tch_i = exprICode(index);\r\n\r\n\t\t\t\t\tif(ch_i === OPAREN_CODE) {\r\n\t\t\t\t\t\tnode = gobbleGroup();\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tnode = gobbleIdentifier();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tgobbleSpaces();\r\n\t\t\t\t\tch_i = exprICode(index);\r\n\t\t\t\t\twhile(ch_i === PERIOD_CODE || ch_i === OBRACK_CODE || ch_i === OPAREN_CODE) {\r\n\t\t\t\t\t\tindex++;\r\n\t\t\t\t\t\tif(ch_i === PERIOD_CODE) {\r\n\t\t\t\t\t\t\tgobbleSpaces();\r\n\t\t\t\t\t\t\tnode = {\r\n\t\t\t\t\t\t\t\ttype: MEMBER_EXP,\r\n\t\t\t\t\t\t\t\tcomputed: false,\r\n\t\t\t\t\t\t\t\tobject: node,\r\n\t\t\t\t\t\t\t\tproperty: gobbleIdentifier()\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t} else if(ch_i === OBRACK_CODE) {\r\n\t\t\t\t\t\t\tnode = {\r\n\t\t\t\t\t\t\t\ttype: MEMBER_EXP,\r\n\t\t\t\t\t\t\t\tcomputed: true,\r\n\t\t\t\t\t\t\t\tobject: node,\r\n\t\t\t\t\t\t\t\tproperty: gobbleExpression()\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\tgobbleSpaces();\r\n\t\t\t\t\t\t\tch_i = exprICode(index);\r\n\t\t\t\t\t\t\tif(ch_i !== CBRACK_CODE) {\r\n\t\t\t\t\t\t\t\tthrowError('Unclosed [', index);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tindex++;\r\n\t\t\t\t\t\t} else if(ch_i === OPAREN_CODE) {\r\n\t\t\t\t\t\t\t// A function call is being made; gobble all the arguments\r\n\t\t\t\t\t\t\tnode = {\r\n\t\t\t\t\t\t\t\ttype: CALL_EXP,\r\n\t\t\t\t\t\t\t\t'arguments': gobbleArguments(CPAREN_CODE),\r\n\t\t\t\t\t\t\t\tcallee: node\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tgobbleSpaces();\r\n\t\t\t\t\t\tch_i = exprICode(index);\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn node;\r\n\t\t\t\t},\r\n\r\n\t\t\t\t// Responsible for parsing a group of things within parentheses `()`\r\n\t\t\t\t// This function assumes that it needs to gobble the opening parenthesis\r\n\t\t\t\t// and then tries to gobble everything within that parenthesis, assuming\r\n\t\t\t\t// that the next thing it should see is the close parenthesis. If not,\r\n\t\t\t\t// then the expression probably doesn't have a `)`\r\n\t\t\t\tgobbleGroup = function() {\r\n\t\t\t\t\tindex++;\r\n\t\t\t\t\tvar node = gobbleExpression();\r\n\t\t\t\t\tgobbleSpaces();\r\n\t\t\t\t\tif(exprICode(index) === CPAREN_CODE) {\r\n\t\t\t\t\t\tindex++;\r\n\t\t\t\t\t\treturn node;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthrowError('Unclosed (', index);\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\r\n\t\t\t\t// Responsible for parsing Array literals `[1, 2, 3]`\r\n\t\t\t\t// This function assumes that it needs to gobble the opening bracket\r\n\t\t\t\t// and then tries to gobble the expressions as arguments.\r\n\t\t\t\tgobbleArray = function() {\r\n\t\t\t\t\tindex++;\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\ttype: ARRAY_EXP,\r\n\t\t\t\t\t\telements: gobbleArguments(CBRACK_CODE)\r\n\t\t\t\t\t};\r\n\t\t\t\t},\r\n\r\n\t\t\t\tnodes = [], ch_i, node;\r\n\r\n\t\t\twhile(index < length) {\r\n\t\t\t\tch_i = exprICode(index);\r\n\r\n\t\t\t\t// Expressions can be separated by semicolons, commas, or just inferred without any\r\n\t\t\t\t// separators\r\n\t\t\t\tif(ch_i === SEMCOL_CODE || ch_i === COMMA_CODE) {\r\n\t\t\t\t\tindex++; // ignore separators\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// Try to gobble each expression individually\r\n\t\t\t\t\tif((node = gobbleExpression())) {\r\n\t\t\t\t\t\tnodes.push(node);\r\n\t\t\t\t\t// If we weren't able to find a binary expression and are out of room, then\r\n\t\t\t\t\t// the expression passed in probably has too much\r\n\t\t\t\t\t} else if(index < length) {\r\n\t\t\t\t\t\tthrowError('Unexpected \"' + exprI(index) + '\"', index);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// If there's only one expression just try returning the expression\r\n\t\t\tif(nodes.length === 1) {\r\n\t\t\t\treturn nodes[0];\r\n\t\t\t} else {\r\n\t\t\t\treturn {\r\n\t\t\t\t\ttype: COMPOUND,\r\n\t\t\t\t\tbody: nodes\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t// To be filled in by the template\r\n\tjsep.version = '0.3.3';\r\n\tjsep.toString = function() { return 'JavaScript Expression Parser (JSEP) v' + jsep.version; };\r\n\r\n\t/**\r\n\t * @method jsep.addUnaryOp\r\n\t * @param {string} op_name The name of the unary op to add\r\n\t * @return jsep\r\n\t */\r\n\tjsep.addUnaryOp = function(op_name) {\r\n\t\tmax_unop_len = Math.max(op_name.length, max_unop_len);\r\n\t\tunary_ops[op_name] = t; return this;\r\n\t};\r\n\r\n\t/**\r\n\t * @method jsep.addBinaryOp\r\n\t * @param {string} op_name The name of the binary op to add\r\n\t * @param {number} precedence The precedence of the binary op (can be a float)\r\n\t * @return jsep\r\n\t */\r\n\tjsep.addBinaryOp = function(op_name, precedence) {\r\n\t\tmax_binop_len = Math.max(op_name.length, max_binop_len);\r\n\t\tbinary_ops[op_name] = precedence;\r\n\t\treturn this;\r\n\t};\r\n\r\n\t/**\r\n\t * @method jsep.addLiteral\r\n\t * @param {string} literal_name The name of the literal to add\r\n\t * @param {*} literal_value The value of the literal\r\n\t * @return jsep\r\n\t */\r\n\tjsep.addLiteral = function(literal_name, literal_value) {\r\n\t\tliterals[literal_name] = literal_value;\r\n\t\treturn this;\r\n\t};\r\n\r\n\t/**\r\n\t * @method jsep.removeUnaryOp\r\n\t * @param {string} op_name The name of the unary op to remove\r\n\t * @return jsep\r\n\t */\r\n\tjsep.removeUnaryOp = function(op_name) {\r\n\t\tdelete unary_ops[op_name];\r\n\t\tif(op_name.length === max_unop_len) {\r\n\t\t\tmax_unop_len = getMaxKeyLen(unary_ops);\r\n\t\t}\r\n\t\treturn this;\r\n\t};\r\n\r\n\t/**\r\n\t * @method jsep.removeAllUnaryOps\r\n\t * @return jsep\r\n\t */\r\n\tjsep.removeAllUnaryOps = function() {\r\n\t\tunary_ops = {};\r\n\t\tmax_unop_len = 0;\r\n\r\n\t\treturn this;\r\n\t};\r\n\r\n\t/**\r\n\t * @method jsep.removeBinaryOp\r\n\t * @param {string} op_name The name of the binary op to remove\r\n\t * @return jsep\r\n\t */\r\n\tjsep.removeBinaryOp = function(op_name) {\r\n\t\tdelete binary_ops[op_name];\r\n\t\tif(op_name.length === max_binop_len) {\r\n\t\t\tmax_binop_len = getMaxKeyLen(binary_ops);\r\n\t\t}\r\n\t\treturn this;\r\n\t};\r\n\r\n\t/**\r\n\t * @method jsep.removeAllBinaryOps\r\n\t * @return jsep\r\n\t */\r\n\tjsep.removeAllBinaryOps = function() {\r\n\t\tbinary_ops = {};\r\n\t\tmax_binop_len = 0;\r\n\r\n\t\treturn this;\r\n\t};\r\n\r\n\t/**\r\n\t * @method jsep.removeLiteral\r\n\t * @param {string} literal_name The name of the literal to remove\r\n\t * @return jsep\r\n\t */\r\n\tjsep.removeLiteral = function(literal_name) {\r\n\t\tdelete literals[literal_name];\r\n\t\treturn this;\r\n\t};\r\n\r\n\t/**\r\n\t * @method jsep.removeAllLiterals\r\n\t * @return jsep\r\n\t */\r\n\tjsep.removeAllLiterals = function() {\r\n\t\tliterals = {};\r\n\r\n\t\treturn this;\r\n\t};\r\n\r\n\t// In desktop environments, have a way to restore the old value for `jsep`\r\n\tif (typeof exports === 'undefined') {\r\n\t\tvar old_jsep = root.jsep;\r\n\t\t// The star of the show! It's a function!\r\n\t\troot.jsep = jsep;\r\n\t\t// And a courteous function willing to move out of the way for other similarly-named objects!\r\n\t\tjsep.noConflict = function() {\r\n\t\t\tif(root.jsep === jsep) {\r\n\t\t\t\troot.jsep = old_jsep;\r\n\t\t\t}\r\n\t\t\treturn jsep;\r\n\t\t};\r\n\t} else {\r\n\t\t// In Node.JS environments\r\n\t\tif (typeof module !== 'undefined' && module.exports) {\r\n\t\t\texports = module.exports = jsep;\r\n\t\t} else {\r\n\t\t\texports.parse = jsep;\r\n\t\t}\r\n\t}\r\n}(this));\r\n","var jsep = require('jsep');\n\n/**\n * Evaluation code from JSEP project, under MIT License.\n * Copyright (c) 2013 Stephen Oney, http://jsep.from.so/\n */\n\nvar binops = {\n  '||':  function (a, b) { return a || b; },\n  '&&':  function (a, b) { return a && b; },\n  '|':   function (a, b) { return a | b; },\n  '^':   function (a, b) { return a ^ b; },\n  '&':   function (a, b) { return a & b; },\n  '==':  function (a, b) { return a == b; }, // jshint ignore:line\n  '!=':  function (a, b) { return a != b; }, // jshint ignore:line\n  '===': function (a, b) { return a === b; },\n  '!==': function (a, b) { return a !== b; },\n  '<':   function (a, b) { return a < b; },\n  '>':   function (a, b) { return a > b; },\n  '<=':  function (a, b) { return a <= b; },\n  '>=':  function (a, b) { return a >= b; },\n  '<<':  function (a, b) { return a << b; },\n  '>>':  function (a, b) { return a >> b; },\n  '>>>': function (a, b) { return a >>> b; },\n  '+':   function (a, b) { return a + b; },\n  '-':   function (a, b) { return a - b; },\n  '*':   function (a, b) { return a * b; },\n  '/':   function (a, b) { return a / b; },\n  '%':   function (a, b) { return a % b; }\n};\n\nvar unops = {\n  '-' :  function (a) { return -a; },\n  '+' :  function (a) { return a; },\n  '~' :  function (a) { return ~a; },\n  '!' :  function (a) { return !a; },\n};\n\nfunction evaluateArray ( list, context ) {\n  return list.map((v) => evaluate(v, context));\n}\n\nfunction evaluateMember ( node, context ) {\n  const object = evaluate(node.object, context);\n  if ( node.computed ) {\n    return [object, object[evaluate(node.property, context)]];\n  } else {\n    return [object, object[node.property.name]];\n  }\n}\n\nfunction evaluate ( node, context ) {\n\n  switch ( node.type ) {\n\n    case 'ArrayExpression':\n      return evaluateArray( node.elements, context );\n\n    case 'BinaryExpression':\n      return binops[ node.operator ]( evaluate( node.left, context ), evaluate( node.right, context ) );\n\n    case 'CallExpression':\n      let caller, fn;\n      if (node.callee.type === 'MemberExpression') {\n        [ caller, fn ] = evaluateMember( node.callee, context );\n      } else {\n        fn = evaluate( node.callee, context );\n      }\n      if (typeof fn  !== 'function') return undefined;\n      return fn.apply( caller, evaluateArray( node.arguments, context ) );\n\n    case 'ConditionalExpression':\n      return evaluate( node.test, context )\n        ? evaluate( node.consequent, context )\n        : evaluate( node.alternate, context );\n\n    case 'Identifier':\n      return context[node.name];\n\n    case 'Literal':\n      return node.value;\n\n    case 'LogicalExpression':\n      return binops[ node.operator ]( evaluate( node.left, context ), evaluate( node.right, context ) );\n\n    case 'MemberExpression':\n      return evaluateMember(node, context)[1];\n\n    case 'ThisExpression':\n      return context;\n\n    case 'UnaryExpression':\n      return unops[ node.operator ]( evaluate( node.argument, context ) );\n\n    default:\n      return undefined;\n  }\n\n}\n\nfunction compile (expression) {\n  return evaluate.bind(null, jsep(expression));\n}\n\nmodule.exports = {\n  parse: jsep,\n  eval: evaluate,\n  compile: compile\n};\n"],"names":["root","MEMBER_EXP","LITERAL","throwError","message","index","error","Error","description","unary_ops","-","!","~","+","binary_ops","||","&&","|","^","&","==","!=","===","!==","<",">","<=",">=","<<",">>",">>>","*","/","%","getMaxKeyLen","obj","len","max_len","key","length","hasOwnProperty","max_unop_len","max_binop_len","literals","true","false","null","binaryPrecedence","op_val","createBinaryExpression","operator","left","right","type","isDecimalDigit","ch","isIdentifierStart","String","fromCharCode","jsep","expr","ch_i","node","charAtFunc","charAt","charCodeAtFunc","charCodeAt","exprI","i","call","exprICode","gobbleSpaces","gobbleExpression","consequent","alternate","test","gobbleBinaryExpression","gobbleBinaryOp","to_check","substr","tc_len","biop","prec","stack","biop_info","gobbleToken","value","pop","push","gobbleNumericLiteral","gobbleStringLiteral","gobbleArray","argument","prefix","gobbleVariable","chCode","number","parseFloat","raw","str","quote","closed","gobbleIdentifier","identifier","start","slice","name","gobbleArguments","termination","args","gobbleGroup","computed","object","property","arguments","callee","elements","nodes","body","version","toString","addUnaryOp","op_name","Math","max","this","addBinaryOp","precedence","addLiteral","literal_name","literal_value","removeUnaryOp","removeAllUnaryOps","removeBinaryOp","removeAllBinaryOps","removeLiteral","removeAllLiterals","module","exports","binops","a","b","unops","evaluateArray","list","context","map","v","evaluate","evaluateMember","caller","fn","apply","parse","eval","compile","expression","bind"],"mappings":"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"}